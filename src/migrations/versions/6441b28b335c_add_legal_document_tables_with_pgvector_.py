"""Add legal document tables with pgvector support

Revision ID: 6441b28b335c
Revises: 
Create Date: 2025-08-12 09:51:31.946125

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector

# revision identifiers, used by Alembic.
revision: str = '6441b28b335c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Enable pgvector extension
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    
    op.create_table('legal_document',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('case_number', sa.String(length=100), nullable=False),
    sa.Column('court_name', sa.String(length=200), nullable=False),
    sa.Column('jurisdiction', sa.String(length=100), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('full_text', sa.Text(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('embedding', Vector(384), nullable=True),
    sa.Column('decision_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('case_type', sa.String(length=100), nullable=True),
    sa.Column('legal_area', sa.String(length=100), nullable=True),
    sa.Column('content_hash', sa.String(length=64), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_status', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_legal_document_date', 'legal_document', ['decision_date'], unique=False)
    op.create_index('idx_legal_document_jurisdiction_type', 'legal_document', ['jurisdiction', 'case_type'], unique=False)
    op.create_index(op.f('ix_legal_document_case_number'), 'legal_document', ['case_number'], unique=False)
    op.create_index(op.f('ix_legal_document_content_hash'), 'legal_document', ['content_hash'], unique=True)
    op.create_index(op.f('ix_legal_document_court_name'), 'legal_document', ['court_name'], unique=False)
    op.create_index(op.f('ix_legal_document_is_active'), 'legal_document', ['is_active'], unique=False)
    op.create_index(op.f('ix_legal_document_jurisdiction'), 'legal_document', ['jurisdiction'], unique=False)
    op.create_index(op.f('ix_legal_document_uuid'), 'legal_document', ['uuid'], unique=True)
    op.create_table('search_query',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_hash', sa.String(length=64), nullable=False),
    sa.Column('jurisdiction_filter', sa.String(length=100), nullable=True),
    sa.Column('case_type_filter', sa.String(length=100), nullable=True),
    sa.Column('date_from', sa.DateTime(timezone=True), nullable=True),
    sa.Column('date_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('results_count', sa.Integer(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_search_query_hash_date', 'search_query', ['query_hash', 'created_at'], unique=False)
    op.create_index(op.f('ix_search_query_query_hash'), 'search_query', ['query_hash'], unique=False)
    op.create_index(op.f('ix_search_query_query_text'), 'search_query', ['query_text'], unique=False)
    op.create_index(op.f('ix_search_query_user_id'), 'search_query', ['user_id'], unique=False)
    op.create_table('document_citation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('cited_case_number', sa.String(length=100), nullable=False),
    sa.Column('cited_court', sa.String(length=200), nullable=True),
    sa.Column('citation_text', sa.Text(), nullable=False),
    sa.Column('page_reference', sa.String(length=50), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=False),
    sa.Column('validation_score', sa.Float(), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default='now()', nullable=False),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['legal_document.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_citation_case_number', 'document_citation', ['cited_case_number'], unique=False)
    op.create_index(op.f('ix_document_citation_cited_case_number'), 'document_citation', ['cited_case_number'], unique=False)
    op.create_index(op.f('ix_document_citation_document_id'), 'document_citation', ['document_id'], unique=False)
    op.create_index(op.f('ix_document_citation_is_validated'), 'document_citation', ['is_validated'], unique=False)
    op.drop_index(op.f('ix_token_blacklist_token'), table_name='token_blacklist')
    op.drop_table('token_blacklist')
    op.drop_index(op.f('ix_post_created_by_user_id'), table_name='post')
    op.drop_index(op.f('ix_post_is_deleted'), table_name='post')
    op.drop_table('post')
    op.create_unique_constraint(None, 'rate_limit', ['id'])
    op.create_unique_constraint(None, 'tier', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tier', type_='unique')
    op.drop_constraint(None, 'rate_limit', type_='unique')
    op.create_table('post',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('text', sa.VARCHAR(length=63206), autoincrement=False, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('media_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], name=op.f('post_created_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', 'uuid', name=op.f('post_pkey')),
    sa.UniqueConstraint('id', name=op.f('post_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name=op.f('post_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_post_is_deleted'), 'post', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_post_created_by_user_id'), 'post', ['created_by_user_id'], unique=False)
    op.create_table('token_blacklist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('token_blacklist_pkey'))
    )
    op.create_index(op.f('ix_token_blacklist_token'), 'token_blacklist', ['token'], unique=True)
    op.drop_index(op.f('ix_document_citation_is_validated'), table_name='document_citation')
    op.drop_index(op.f('ix_document_citation_document_id'), table_name='document_citation')
    op.drop_index(op.f('ix_document_citation_cited_case_number'), table_name='document_citation')
    op.drop_index('idx_citation_case_number', table_name='document_citation')
    op.drop_table('document_citation')
    op.drop_index(op.f('ix_search_query_user_id'), table_name='search_query')
    op.drop_index(op.f('ix_search_query_query_text'), table_name='search_query')
    op.drop_index(op.f('ix_search_query_query_hash'), table_name='search_query')
    op.drop_index('idx_search_query_hash_date', table_name='search_query')
    op.drop_table('search_query')
    op.drop_index(op.f('ix_legal_document_uuid'), table_name='legal_document')
    op.drop_index(op.f('ix_legal_document_jurisdiction'), table_name='legal_document')
    op.drop_index(op.f('ix_legal_document_is_active'), table_name='legal_document')
    op.drop_index(op.f('ix_legal_document_court_name'), table_name='legal_document')
    op.drop_index(op.f('ix_legal_document_content_hash'), table_name='legal_document')
    op.drop_index(op.f('ix_legal_document_case_number'), table_name='legal_document')
    op.drop_index('idx_legal_document_jurisdiction_type', table_name='legal_document')
    op.drop_index('idx_legal_document_date', table_name='legal_document')
    op.drop_table('legal_document')
    # ### end Alembic commands ###
