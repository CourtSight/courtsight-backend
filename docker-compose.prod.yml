# Docker Compose configuration for production deployment with Nginx
version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: courtsight_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      
      # SSL certificates
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      
      # Cache directories
      - nginx_cache:/var/cache/nginx
      
      # Web root and static files
      - ./static:/var/www/courtsight:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      
      # Let's Encrypt challenge directory
      - certbot_webroot:/var/www/certbot
      
      # Logs
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - courtsight_network
    environment:
      - TZ=Asia/Jakarta
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.courtsight.service=nginx"
      - "com.courtsight.version=1.0"

  # FastAPI application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: courtsight_web
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - type: bind
        source: ./credential
        target: /app/credential
        read_only: true
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://courtsight:${DB_PASSWORD}@db:5432/courtsight_db
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credential/g-72-courtsightteam-4b64a115adb5.json
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=30
      - ALGORITHM=HS256
      - ALLOWED_HOSTS=["courtsight.id", "www.courtsight.id", "api.courtsight.id"]
      - CORS_ORIGINS=["https://courtsight.id", "https://www.courtsight.id"]
      - LOG_LEVEL=INFO
      - TZ=Asia/Jakarta
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - courtsight_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.courtsight.service=api"
      - "com.courtsight.version=1.0"

  # PostgreSQL database
  db:
    image: pgvector/pgvector:pg15
    container_name: courtsight_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=courtsight_db
      - POSTGRES_USER=courtsight
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - TZ=Asia/Jakarta
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - courtsight_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U courtsight -d courtsight_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.courtsight.service=database"
      - "com.courtsight.version=1.0"
    # Security: Only expose to internal network
    # ports:
    #   - "5432:5432"  # Only for development

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: courtsight_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - TZ=Asia/Jakarta
    volumes:
      - redis_data:/data
    networks:
      - courtsight_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "com.courtsight.service=cache"
      - "com.courtsight.version=1.0"

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: courtsight_worker
    restart: unless-stopped
    command: celery -A src.app.core.celery worker --loglevel=info --concurrency=4
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - type: bind
        source: ./credential
        target: /app/credential
        read_only: true
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://courtsight:${DB_PASSWORD}@db:5432/courtsight_db
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credential/g-72-courtsightteam-4b64a115adb5.json
      - SECRET_KEY=${SECRET_KEY}
      - TZ=Asia/Jakarta
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - courtsight_network
    healthcheck:
      test: ["CMD", "celery", "-A", "src.app.core.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.courtsight.service=worker"
      - "com.courtsight.version=1.0"

  # Celery beat scheduler
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: courtsight_beat
    restart: unless-stopped
    command: celery -A src.app.core.celery beat --loglevel=info
    volumes:
      - ./logs:/app/logs
      - type: bind
        source: ./credential
        target: /app/credential
        read_only: true
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://courtsight:${DB_PASSWORD}@db:5432/courtsight_db
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credential/g-72-courtsightteam-4b64a115adb5.json
      - SECRET_KEY=${SECRET_KEY}
      - TZ=Asia/Jakarta
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - courtsight_network
    labels:
      - "com.courtsight.service=scheduler"
      - "com.courtsight.version=1.0"

  # Let's Encrypt certificate manager
  certbot:
    image: certbot/certbot:latest
    container_name: courtsight_certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    labels:
      - "com.courtsight.service=certbot"
      - "com.courtsight.version=1.0"

networks:
  courtsight_network:
    driver: bridge
    name: courtsight_network

volumes:
  postgres_data:
    name: courtsight_postgres_data
  redis_data:
    name: courtsight_redis_data
  nginx_cache:
    name: courtsight_nginx_cache
  nginx_logs:
    name: courtsight_nginx_logs
  certbot_webroot:
    name: courtsight_certbot_webroot